{"version":3,"sources":["scripts/BufferLoader.js","components/studio.js","serviceWorker.js","index.js","assets/instrumentsImgs.js"],"names":["BufferLoader","context","urlList","callback","console","log","this","onload","bufferList","Array","loadCount","prototype","loadBuffer","url","index","request","XMLHttpRequest","open","responseType","loader","decodeAudioData","response","buffer","length","alert","error","onerror","send","load","i","Studio","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeVolume","event","volume","channelIndex","channelData","state","edited","audioEffects","gainNode","gain","value","setState","editEffect","effect","playAll","recording","that","assertThisInitialized","resume","mainGain","createGain","forEach","channel","ci","suspended","audioFiles","audio","ai","bufferSource","createBufferSource","initNode","connect","delayNode","addDelayEffect","delay","distortionNode","addDistortionEffect","distortion","addReverbEffect","reverb","start","currentTime","location","spacing","disconnect","destination","status","clearInterval","timer","startTime","Date","now","runningTime","setInterval","pauseAll","suspend","stopAll","stop","handleDrag","e","data","loc","node","id","split","x","new","addChannel","push","instrument","title","deleteAudio","splice","onUpload","loading","reader1","FileReader","target","file","files","ev","result","then","newAudioFiles","name","size","readAsArrayBuffer","saveSong","formData","FormData","append","updateSongLength","JSON","stringify","deletedChannels","songId","bpm","timeSignature","key","axios","post","res","window","downloadLink","asyncToGenerator","regenerator_default","a","mark","_callee2","rec","wrap","_context2","prev","next","saving","Recorder","record","setTimeout","_callee","_context","exportWAV","blob","File","uploadNewExport","editTitle","text","editChannelLabel","URL","document","searchParams","get","AudioContext","webkitAudioContext","playing","playbackTime","getImpulse","channels","lastExportedUrl","loadingCounter","mappedAudioUrls","audioClip","audioUrl","finishedLoading","bufferIndex","s","pad","n","z","slice","ms","secs","_this2","audioFile","duration","audioDuration","_this3","stream","effectValue","audioCtx","masterNode","distortionGainNode","createWaveShaper","curve","amount","k","Float32Array","Math","PI","atan","sinh","abs","makeDistortionCurve","bypassNode","ajaxRequest","impulseData","convolverBuffer","convolverGainNode","convolver","createConvolver","streamNode","createDelay","feedbackNode","delayTime","tab","currentDeletedChannel","_this4","react_default","createElement","className","CircularProgress_default","thickness","main_bundle_default","labelClassName","inputClassName","inputWidth","onFocusOut","bind","Button_default","onClick","index_es","icon","faStop","faPause","faPlay","msToTime","editBPM","style","marginRight","faMusic","editKey","editTimeSignature","faSave","faFileExport","color","textDecoration","href","download","faCloudDownloadAlt","map","position","class","deleteChannel","faWindowClose","_id","src","InstrumentImgs","type","onChange","faVolumeMute","faHeadphones","Slider_default","classes","root","track","aria-labelledby","changeTab","faMagic","faStepBackward","faPlus","left","audioclip","react_draggable_default","bounds","axis","defaultPosition","y","onDrag","lib_default","width","height","waveStyle","animate","pointWidth","Component","Boolean","hostname","match","ReactDOM","render","studio","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","guitar","vocal","bass","drums"],"mappings":"8QAAA,SAASA,EAAaC,EAASC,EAASC,GACpCC,QAAQC,IAAI,aACZC,KAAKL,QAAUA,EACfK,KAAKJ,QAAUA,EACfI,KAAKC,OAASJ,EACdG,KAAKE,WAAa,IAAIC,MACtBH,KAAKI,UAAY,EAGrBV,EAAaW,UAAUC,WAAa,SAASC,EAAKC,GAC9CV,QAAQC,IAAI,cAEZ,IAAIU,EAAU,IAAIC,eAClBD,EAAQE,KAAK,MAAOJ,GAAK,GACzBE,EAAQG,aAAe,cAEvB,IAAIC,EAASb,KAEbS,EAAQR,OAAS,WAEbY,EAAOlB,QAAQmB,gBACXL,EAAQM,SACR,SAASC,GACAA,GAILH,EAAOX,WAAWM,GAASQ,IACrBH,EAAOT,WAAaS,EAAOjB,QAAQqB,QACrCJ,EAAOZ,OAAOY,EAAOX,aALrBgB,MAAM,6BAA+BX,IAO7C,SAASY,GACLrB,QAAQqB,MAAM,wBAAyBA,MAKnDV,EAAQW,QAAU,WACdF,MAAM,4BAGVT,EAAQY,QAGZ3B,EAAaW,UAAUiB,KAAO,WAC1BxB,QAAQC,IAAIC,KAAKJ,SACjB,IAAK,IAAI2B,EAAI,EAAGA,EAAIvB,KAAKJ,QAAQqB,SAAUM,EACvCvB,KAAKM,WAAWN,KAAKJ,QAAQ2B,GAAIA,IAG1B7B,sHCslBA8B,cAxnBX,SAAAA,EAAYC,GAAM,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAA3B,KAAAwB,IACdE,EAAAC,OAAAE,EAAA,EAAAF,CAAA3B,KAAA2B,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAA/B,KAAMyB,KAsFVO,aAAe,SAACC,EAAOC,EAAOC,GAC1BrC,QAAQC,IAAIkC,EAAMC,EAAOC,GACzB,IAAIC,EAAcV,EAAKW,MAAMD,YAC7BA,EAAYD,GAAcG,QAAS,EACnCF,EAAYD,GAAcI,aAAaL,OAASA,EAAS,IACzDE,EAAYD,GAAcK,SAASC,KAAKC,MAAQR,EAAS,IACzDR,EAAKiB,SAAS,CAAEP,iBA7FFV,EAgGlBkB,WAAa,SAACC,EAAOH,EAAMP,GACvB,IAAIC,EAAcV,EAAKW,MAAMD,YAC7BA,EAAYD,GAAcG,QAAS,EACnCF,EAAYD,GAAcI,aAAaM,GAAUH,EACjDhB,EAAKiB,SAAS,CAACP,iBApGDV,EAuHlBoB,QAAU,SAACC,GACP,IAAIX,EAAcV,EAAKW,MAAMD,YACvBY,EAAIrB,OAAAsB,EAAA,EAAAtB,QAAAsB,EAAA,EAAAtB,CAAAD,IACVA,EAAKW,MAAM1C,QAAQuD,SACnB,IAAMC,EAAWH,EAAKX,MAAM1C,QAAQyD,aACpC1B,EAAKiB,SAAS,CAACQ,aACfzB,EAAKW,MAAMD,YAAYiB,QAAQ,SAACC,EAAQC,GAC/B7B,EAAKW,MAAMmB,UAwBZ9B,EAAKiB,SAAS,CAACa,WAAU,IAvBzBF,EAAQG,WAAWJ,QAAQ,SAACK,EAAOC,GAC/B,IAAIC,EAAeZ,EAAKX,MAAM1C,QAAQkE,qBAClCC,EAAWd,EAAKX,MAAM1C,QAAQyD,aAClCQ,EAAa5C,OAAS0C,EAAM1C,OAC5B4C,EAAaG,QAAQD,GACrB,IAAIE,EAAYtC,EAAKuC,eAAeH,EAASR,EAAQf,aAAa2B,OAC9DC,EAAiBzC,EAAK0C,oBAAoBJ,EAAUV,EAAQf,aAAa8B,YAc7E,OAbiB3C,EAAK4C,gBAAgBH,EAAeb,EAAQf,aAAagC,QAC/DR,QAAQT,EAAQd,UAC3Bc,EAAQd,SAASuB,QAAQZ,GACzBS,EAAaY,MAAMxB,EAAKX,MAAM1C,QAAQ8E,YAAcf,EAAMgB,SAAWhD,EAAKW,MAAMsC,SAChFvC,EAAYmB,GAAIE,WAAWE,GAAIC,aAAeA,EAC9C9D,QAAQC,IAAI,YAAYgD,GACxBO,EAAQd,SAASC,KAAKC,MAAQY,EAAQf,aAAaL,OAC9Ca,EAGDO,EAAQd,SAASoC,aAFjBtB,EAAQd,SAASuB,QAAQf,EAAKX,MAAM1C,QAAQkF,aAIhDnD,EAAKiB,SAAS,CAACP,gBACRe,MAMnBzB,EAAKiB,SAAS,SAAAN,GACV,GAAIA,EAAMyC,OACNC,cAAcrD,EAAKsD,WAChB,CACH,IAAMC,EAAYC,KAAKC,MAAQzD,EAAKW,MAAM+C,YAC1C1D,EAAKsD,MAAQK,YAAY,WACrB3D,EAAKiB,SAAS,CAAEyC,YAAaF,KAAKC,MAAQF,MAGlD,MAAO,CAAEH,QAASzC,EAAMyC,WAlKdpD,EAqKlB4D,SAAW,WACPP,cAAcrD,EAAKsD,OACnBtD,EAAKW,MAAM1C,QAAQ4F,UACnB7D,EAAKiB,SAAS,CAACmC,QAAQ,EAAOtB,WAAW,KAxK3B9B,EA0KlB8D,QAAU,WACNT,cAAcrD,EAAKsD,OACnB,IAAMhC,EAAIrB,OAAAsB,EAAA,EAAAtB,QAAAsB,EAAA,EAAAtB,CAAAD,IACVA,EAAKW,MAAM1C,QAAQ4F,UACnB7D,EAAKW,MAAMD,YAAYiB,QAAQ,SAACC,GAC5BA,EAAQG,WAAWJ,QAAQ,SAACK,GACxBA,EAAME,aAAa6B,KAAKzC,EAAKX,MAAM1C,QAAQ8E,iBAInD/C,EAAKiB,SAAS,CAACyC,YAAa,EAAGN,QAAQ,EAAOtB,WAAW,KApL3C9B,EAuLlBgE,WAAa,SAACC,EAAEC,GACZ,IAAMxD,EAAcV,EAAKW,MAAMD,YACzByD,EAAMD,EAAKE,KAAKC,GAAGC,MAAM,KAC/B5D,EAAYyD,EAAI,IAAIpC,WAAWoC,EAAI,IAAInB,SAAWkB,EAAKK,EAClD7D,EAAYyD,EAAI,IAAIK,MACrB9D,EAAYyD,EAAI,IAAIvD,QAAS,GAEjCZ,EAAKiB,SAASP,IA9LAV,EAiMlByE,WAAa,WAETrG,QAAQC,IAAI,eACZ,IAAIqC,EAAcV,EAAKW,MAAMD,YAC7BA,EAAYgE,KAAK,CACbC,WAAc,QACdC,MAAS,cACT/D,aAAgB,CACZL,OAAQ,EACRmC,WAAW,EACXH,MAAM,EACNK,OAAO,GAEXd,WAAc,GACdyC,KAAO,IAEXxE,EAAKiB,SAAS,CAACP,iBAjNDV,EAoNlB6E,YAAc,SAAChD,EAAGI,GACd,IAAIvB,EAAcV,EAAKW,MAAMD,YACzBA,EAAYmB,GAAIE,WAAWE,GAAIC,cAC/BxB,EAAYmB,GAAIE,WAAWE,GAAIC,aAAagB,aAEhDxC,EAAYmB,GAAIE,WAAW+C,OAAO7C,EAAG,GAChCvB,EAAYmB,GAAI2C,MACjB9D,EAAYmB,GAAIjB,QAAS,GAE7BZ,EAAKiB,SAAS,CAACP,iBA7NDV,EAgOlB+E,SAAW,SAACd,GACRjE,EAAKiB,SAAS,CAAC+D,SAAQ,IACvB,IAAMC,EAAU,IAAIC,WACdrD,EAAKoC,EAAEkB,OAAOd,GAAGC,MAAM,KAAK,GAC9B5D,EAAcV,EAAKW,MAAMD,YACvBY,EAAIrB,OAAAsB,EAAA,EAAAtB,QAAAsB,EAAA,EAAAtB,CAAAD,IACJoF,EAAOnB,EAAEkB,OAAOE,MAAM,GAC5BJ,EAAQ1G,OAAS,SAAS+G,GACtBhE,EAAKX,MAAM1C,QAAQmB,gBAAgBkG,EAAGH,OAAOI,QAAQC,KAAK,SAASlG,GAG/DlB,QAAQC,IAAI+G,GACZ,IAAMK,EAAgBnE,EAAKX,MAAM8E,cACjCA,EAAcf,KAAKU,GACnB9D,EAAKL,SAAS,CAACwE,kBASV/E,EAAYmB,GAAI2C,MACjB9D,EAAYmB,GAAIjB,QAAS,GAE7BF,EAAYmB,GAAIE,WAAW2C,KAAK,CAC5B1B,SAAS,EACT0C,KAAMN,EAAKM,KACXC,KAAMP,EAAKO,OAGfrE,EAAKL,SAAS,CAACP,gBAEfA,EAAYmB,GAAIE,WAAWrB,EAAYmB,GAAIE,WAAWxC,OAAS,GAAGD,OAASA,EAC3EgC,EAAKL,SAAS,CAACP,cAAYsE,SAAS,OAG5CC,EAAQW,kBAAkBR,IAtQZpF,EA0QlB6F,SAAW,WACP7F,EAAKiB,SAAS,CAAC+D,SAAQ,IACvB,IAAMc,EAAW,IAAIC,SACrB/F,EAAKW,MAAM8E,cAAc9D,QAAQ,SAACK,GAC9B8D,EAASE,OAAO,gBAAgBhE,KAErBhC,EAAKiG,mBACpBH,EAASE,OAAO,WAAWE,KAAKC,UAAUnG,EAAKW,MAAMD,cACrDoF,EAASE,OAAO,kBAAkBE,KAAKC,UAAUnG,EAAKW,MAAMyF,kBAC5DN,EAASE,OAAO,SAAShG,EAAKW,MAAM0F,QACpCP,EAASE,OAAO,QAAQhG,EAAKW,MAAMiE,OACnCkB,EAASE,OAAO,MAAMhG,EAAKW,MAAM2F,KACjCR,EAASE,OAAO,gBAAgBhG,EAAKW,MAAM4F,eAC3CT,EAASE,OAAO,MAAMhG,EAAKW,MAAM6F,KACjCV,EAASE,OAAO,SAAShG,EAAKW,MAAMpB,QACpCkH,IAAMC,KAAK,gEAAgEZ,GAAUN,KAAK,SAACmB,GACvFC,OAAOpH,MAAMmH,GACb3G,EAAKiB,SAAS,CAAC+D,SAAQ,OA3RbhF,EA+RlB6G,aA/RkB5G,OAAA6G,EAAA,EAAA7G,CAAA8G,EAAAC,EAAAC,KA+RH,SAAAC,IAAA,IAAA3H,EAAA4H,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXvH,EAAKiB,SAAS,CAACuG,QAAO,IAChBjI,EAASS,EAAKiG,mBAFToB,EAAAE,KAAA,EAGLvH,EAAKoB,SAAQ,GAHR,QAIP+F,EAAM,IAAIM,IAASzH,EAAKW,MAAMc,WAC9BiG,SACJC,WAAU1H,OAAA6G,EAAA,EAAA7G,CAAA8G,EAAAC,EAAAC,KAAC,SAAAW,IAAA,OAAAb,EAAAC,EAAAI,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,cACPJ,EAAIpD,OADG8D,EAAAN,KAAA,EAEDvH,EAAK8D,UAFJ,OAGPqD,EAAIW,UAAU,SAACC,GACX,IAAM3C,EAAO,IAAI4C,KAAK,CAACD,GAAO,cAC9B/H,EAAKiI,gBAAgB7C,KALlB,wBAAAyC,EAAA9D,SAAA6D,MAOA,IAATrI,GAbS,wBAAA8H,EAAAtD,SAAAmD,MA/RGlH,EAwTlBkI,UAAY,SAACC,GAETnI,EAAKiB,SAAS,CAAC2D,MAAMuD,KA1TPnI,EA6TlBoI,iBAAmB,SAACD,EAAKtG,GACrB,IAAInB,EAAcV,EAAKW,MAAMD,YAC7BA,EAAYmB,GAAIjB,QAAS,EACzBF,EAAYmB,GAAI+C,MAAQuD,EACxBnI,EAAKiB,SAAS,CAACP,iBA/Tf,IAAMY,EAAIrB,OAAAsB,EAAA,EAAAtB,QAAAsB,EAAA,EAAAtB,CAAAD,IAENqE,EADa,IAAIgE,IAAIC,SAAStF,UAAWuF,aAC1BC,IAAI,MAJT,OAKd5B,OAAO6B,aAAe7B,OAAO6B,cAAgB7B,OAAO8B,mBACpD1I,EAAKW,MAAQ,CACTH,OAAQ,IACRyC,QAAS,EACTS,YAAa,EACbiF,SAAS,EACTC,aAAc,EACdlI,YAAa,GACbsE,SAAQ,EACRqB,OAAQhC,EACRO,MAAO,WACP0B,IAAK,IACLb,cAAe,GACfxH,QAAS,IAAIwK,aACbjC,IAAK,OACLD,cAAe,MACfH,gBAAiB,IAErBpG,EAAKW,MAAM1C,QAAQ4F,UACnB7D,EAAK6I,aACLpC,IAAMC,KAAK,gEAAgE,CAACrC,OACvEmB,KAAK,SAACmB,GACPA,EAAMA,EAAIzC,KACV5C,EAAKL,SAAS,CAACP,YAAaiG,EAAImC,SAAUlE,MAAO+B,EAAI/B,MAAO0B,IAAKK,EAAIL,IAAKE,IAAKG,EAAIH,IAAKD,cAAeI,EAAIJ,cAAewC,gBAAiBpC,EAAIoC,kBAC/I3K,QAAQC,IAAI2B,EAAKW,OACjB,IAAIqI,EAAiB,EACjBrC,EAAImC,SAASvJ,OAAS,EACtBoH,EAAImC,SAASnH,QAAQ,SAACC,EAAS9C,GAC3B,IAAMgC,EAAWQ,EAAKX,MAAM1C,QAAQyD,aAEpC,GADAiF,EAAImC,SAAShK,GAAOgC,SAAWA,EAC3Bc,EAAQG,WAAWxC,OAAS,EAAG,CAC/B,IAAM0J,EAAkB,GACxBrH,EAAQG,WAAWJ,QAAQ,SAACuH,GACxBD,EAAgBvE,KAAKwE,EAAUC,YAEd,IAAInL,EACrBsD,EAAKX,MAAM1C,QACXgL,EACAG,GAESxJ,YAEbwJ,EAAgB,IAGpB,SAASA,EAAgB5K,GACrBwK,IACA5K,QAAQC,IAAI2K,GACZxK,EAAWmD,QAAQ,SAACrC,EAAQ+J,GACxB1C,EAAImC,SAAShK,GAAOiD,WAAWsH,GAAa/J,OAASA,IAErD0J,IAAmBrC,EAAImC,SAASvJ,SAChC+B,EAAKL,SAAS,CAAC+D,SAAS,IACxB1D,EAAKL,SAAS,CAACP,YAAaiG,EAAImC,eAK5CxH,EAAKL,SAAS,CAAC+D,SAAS,MA/DlBhF,wEAqETsJ,GAGL,SAASC,EAAIC,EAAGC,GAEZ,OAAQ,KAAOD,GAAGE,QADlBD,EAAIA,GAAK,IAIb,IAAIE,EAAKL,EAAI,IAETM,GADJN,GAAKA,EAAIK,GAAM,KACA,GAIf,OAAOJ,GAHPD,GAAKA,EAAIM,GAAQ,IACF,IAEI,IAAML,EAAIK,GAAQ,IAAML,EAAII,EAAI,8CAqBpC,IAAAE,EAAAvL,KACXiB,EAAS,EAWb,OAVAjB,KAAKqC,MAAMD,YAAYiB,QAAQ,SAACC,GAC5BA,EAAQG,WAAWJ,QAAQ,SAACmI,GACxB1L,QAAQC,IAAI,WAAWyL,EAAUxK,OAAOyK,UACzC,IAAMC,EAAiBF,EAAU9G,SAAW6G,EAAKlJ,MAAMsC,QAAW6G,EAAUxK,OAAOyK,SAC/EC,EAAgBzK,IAChBA,EAASyK,OAIpB1L,KAAK2C,SAAS,CAAC1B,WACRA,0CA2LK6F,GAAM,IAAA6E,EAAA3L,KACZwH,EAAW,IAAIC,SACrBD,EAASE,OAAO,SAASZ,GACzBU,EAASE,OAAO,SAAS1H,KAAKqC,MAAM0F,QACpCI,IAAMC,KAAK,0DAA0DZ,GAAUN,KAAK,SAACmB,GACjFsD,EAAKhJ,SAAS,CAACuG,QAAO,qDAiB1BnE,cAAc/E,KAAKgF,mDAGH4G,EAAOC,GACvB,IAAIC,EAAW9L,KAAKqC,MAAM1C,QACtB+C,EAAQmJ,EAAY,GACpBE,EAAaD,EAAS1I,aACtB4I,EAAqBF,EAAS1I,aAC9Be,EAAiB2H,EAASG,mBAC9B9H,EAAe+H,MAWf,SAA6BC,GAOzB,IANA,IAKIlG,EALAmG,EAAID,EAEJD,EAAQ,IAAIG,aADA,OAGZ9K,GADM+K,KAAKC,GACP,GAEAhL,EALQ,QAKSA,EACrB0E,EAAQ,EAAJ1E,EANQ,MAMY,EACxB2K,EAAM3K,IAAM,EAAI6K,GAAGE,KAAKE,KAAuB,EAAlBF,KAAKG,KAAO,IAAFxG,KAAcqG,KAAKC,GAAKH,EAAIE,KAAKI,IAAIzG,IAEhF,OAAOiG,EAtBYS,CAAoB,KAC3Cf,EAAO7H,QAAQI,GACfA,EAAeJ,QAAQiI,GACvBA,EAAmBvJ,KAAKC,MAAQA,EAChC,IAAIkK,EAAad,EAAS1I,aAK1B,OAJAwI,EAAO7H,QAAQ6I,GACfA,EAAW7I,QAAQgI,GACnBa,EAAWnK,KAAKC,MAAQ,EACxBsJ,EAAmBjI,QAAQgI,GACpBA,uCAkBP,IACIc,EAAc,IAAInM,eAClBsC,EAAOhD,KACX6M,EAAYlM,KAAK,MAHA,2FAGmB,GACpCkM,EAAYjM,aAAe,cAE3BiM,EAAY5M,OAAS,WACjB,IAAI6M,EAAcD,EAAY9L,SAC9BiC,EAAKX,MAAM1C,QAAQmB,gBAAgBgM,GAAa5F,KAAK,SAASlG,GAC1DgC,EAAKL,SAAS,CAACoK,gBAAgB/L,OAGvC6L,EAAYxL,+CAGAuK,EAAOC,GACnB,IAAInJ,EAAQmJ,EAAY,GACpBC,EAAW9L,KAAKqC,MAAM1C,QACtBoM,EAAaD,EAAS1I,aACtBwJ,EAAad,EAAS1I,aACtB4J,EAAoBlB,EAAS1I,aAC7B6J,EAAYnB,EAASoB,kBASzB,OARAD,EAAUjM,OAAShB,KAAKqC,MAAM0K,gBAC9BnB,EAAO7H,QAAQkJ,GACfA,EAAUlJ,QAAQiJ,GAClBA,EAAkBvK,KAAKC,MAAQA,EAC/BsK,EAAkBjJ,QAAQgI,GAC1BH,EAAO7H,QAAQ6I,GACfA,EAAWnK,KAAKC,MAAQ,EACxBkK,EAAW7I,QAAQgI,GACZA,yCAIIH,EAAOC,GAClB,IAAInJ,EAAQmJ,EAAY,IACxB/L,QAAQC,IAAI2C,GACZ,IAAIoJ,EAAW9L,KAAKqC,MAAM1C,QAEtBwN,EAAavB,EACb5H,EAAY8H,EAASsB,YAAY,KACjCC,EAAevB,EAAS1I,aACxBwJ,EAAad,EAAS1I,aACtB2I,EAAaD,EAAS1I,aAiB1B,OAdAY,EAAUsJ,UAAU5K,MAAQ,KAC5B2K,EAAa5K,KAAKC,MAAQ,GAC1BkK,EAAWnK,KAAKC,MAAQA,EAGxByK,EAAWpJ,QAAQC,GACnBA,EAAUD,QAAQsJ,GAClBA,EAAatJ,QAAQC,GAErBA,EAAUD,QAAQ6I,GAClBA,EAAW7I,QAAQgI,GACnBoB,EAAWpJ,QAAQgI,GAGZA,oCAGD5J,EAAcO,GACpB,IAAIN,EAAcpC,KAAKqC,MAAMD,YAC7BA,EAAYD,GAAcoL,IAAM7K,EAChC1C,KAAK2C,SAAS,CAACP,gDAGX4F,GACJhI,KAAK2C,SAAS,CAACqF,kDAEDC,GACdjI,KAAK2C,SAAS,CAACsF,kDAEXC,GACJlI,KAAK2C,SAAS,CAACuF,8CAGL3E,GACV,IAAInB,EAAcpC,KAAKqC,MAAMD,YACzB0F,EAAkB9H,KAAKqC,MAAMyF,gBAC7B0F,EAAwBpL,EAAYoE,OAAOjD,EAAG,GAClDuE,EAAgB1B,KAAKoH,EAAsB,IAC3CxN,KAAK2C,SAAS,CAACP,cAAY0F,qDAGtB,IAAA2F,EAAAzN,KACL,OACI0N,EAAAhF,EAAAiF,cAAA,WACM3N,KAAKqC,MAAMqE,SAAW1G,KAAKqC,MAAM6G,OAASwE,EAAAhF,EAAAiF,cAAA,OAAKC,UAAU,WACvDF,EAAAhF,EAAAiF,cAACE,EAAAnF,EAAD,CAAkBrB,KAAM,GAAIyG,UAAW,IACtC9N,KAAKqC,MAAMqE,QAAUgH,EAAAhF,EAAAiF,cAAA,uBAAoBD,EAAAhF,EAAAiF,cAAA,qDACrC,GACTD,EAAAhF,EAAAiF,cAAA,OAAKC,UAAU,UACXF,EAAAhF,EAAAiF,cAAA,OAAKC,UAAU,eACT5N,KAAKqC,MAAMqE,QAMJ,GALLgH,EAAAhF,EAAAiF,cAACI,EAAArF,EAAD,CAAemB,KAAM7J,KAAKqC,MAAMiE,MACjB0H,eAAe,YACfC,eAAe,YACfC,WAAW,QACXC,WAAYnO,KAAK4J,UAAUwE,KAAKpO,SAIvD0N,EAAAhF,EAAAiF,cAAA,OAAKC,UAAU,YACXF,EAAAhF,EAAAiF,cAACU,EAAA3F,EAAD,CAAQkF,UAAW,gBAAiBU,QAAStO,KAAKwF,SAC9CkI,EAAAhF,EAAAiF,cAACY,EAAA,EAAD,CAAiBC,KAAMC,OAE3Bf,EAAAhF,EAAAiF,cAACU,EAAA3F,EAAD,CAAQkF,UAAW,gBAAiBU,QAAStO,KAAKsF,UAC9CoI,EAAAhF,EAAAiF,cAACY,EAAA,EAAD,CAAiBC,KAAME,OAE3BhB,EAAAhF,EAAAiF,cAACU,EAAA3F,EAAD,CAAQkF,UAAW,gBAAiBU,QAAS,WAAKb,EAAK3K,YACnD4K,EAAAhF,EAAAiF,cAACY,EAAA,EAAD,CAAiBC,KAAMG,OAE3BjB,EAAAhF,EAAAiF,cAACU,EAAA3F,EAAD,CAAQkF,UAAW,iBACd5N,KAAK4O,SAAS5O,KAAKqC,MAAM+C,cAE9BsI,EAAAhF,EAAAiF,cAACU,EAAA3F,EAAD,CAAQkF,UAAW,iBACfF,EAAAhF,EAAAiF,cAACI,EAAArF,EAAD,CAAemB,KAAM7J,KAAKqC,MAAM2F,IACjBgG,eAAe,WACfC,eAAe,WACfC,WAAW,OACXC,WAAY,SAACvI,GAAQ6H,EAAKoB,QAAQjJ,MALrD,OAQA8H,EAAAhF,EAAAiF,cAACU,EAAA3F,EAAD,CAAQkF,UAAW,iBACfF,EAAAhF,EAAAiF,cAACY,EAAA,EAAD,CAAiBO,MAAO,CAACC,YAAe,QAASP,KAAMQ,MACrDhP,KAAKqC,MAAMqE,QAQJ,GAPLgH,EAAAhF,EAAAiF,cAACI,EAAArF,EAAD,CAAemB,KAAM7J,KAAKqC,MAAM6F,IACjB8F,eAAe,WACfC,eAAe,WACfC,WAAW,OACXC,WAAY,SAACvI,GACT6H,EAAKwB,QAAQrJ,OAKxC8H,EAAAhF,EAAAiF,cAACU,EAAA3F,EAAD,CAAQkF,UAAW,iBACb5N,KAAKqC,MAAMqE,QAQJ,GAPLgH,EAAAhF,EAAAiF,cAACI,EAAArF,EAAD,CAAemB,KAAM7J,KAAKqC,MAAM4F,cACjB+F,eAAe,WACfC,eAAe,WACfC,WAAW,OACXC,WAAY,SAACvI,GACT6H,EAAKyB,kBAAkBtJ,OAKlD8H,EAAAhF,EAAAiF,cAACU,EAAA3F,EAAD,CAAQkF,UAAW,iBACfF,EAAAhF,EAAAiF,cAACY,EAAA,EAAD,CAAiBO,MAAO,CAACC,YAAe,QAASP,KAAMW,IAAQb,QAAStO,KAAKuH,SAAS6G,KAAKpO,QAD/F,SAGA0N,EAAAhF,EAAAiF,cAACU,EAAA3F,EAAD,CAAQkF,UAAW,iBACfF,EAAAhF,EAAAiF,cAACY,EAAA,EAAD,CAAiBO,MAAO,CAACC,YAAe,QAASP,KAAMY,IAAcd,QAAS,WAAOb,EAAKlF,kBAD9F,WAGCvI,KAAKqC,MAAMoI,gBACZiD,EAAAhF,EAAAiF,cAACU,EAAA3F,EAAD,CAAQkF,UAAW,iBACfF,EAAAhF,EAAAiF,cAAA,KAAGmB,MAAO,CAACO,MAAM,UAAWC,eAAe,QAASC,KAAMvP,KAAKqC,MAAMoI,gBAAiB+E,UAAQ,GAC9F9B,EAAAhF,EAAAiF,cAACY,EAAA,EAAD,CAAiBO,MAAO,CAACC,YAAe,QAASP,KAAMiB,MADvD,cAIF,KAGN/B,EAAAhF,EAAAiF,cAAA,OAAKC,UAAU,YACV5N,KAAKqC,MAAMD,YAAYsN,IAAI,SAACpM,EAAQ4E,GAAT,OACxBwF,EAAAhF,EAAAiF,cAAA,OAAKmB,MAAO,CAACa,SAAS,aAClBjC,EAAAhF,EAAAiF,cAAA,OAAKiC,MAAM,gBAAgBtB,QAAS,WAAOb,EAAKoC,cAAc3H,KAC1DwF,EAAAhF,EAAAiF,cAACY,EAAA,EAAD,CAAiBC,KAAMsB,SAExBxM,EAAQiK,KAAuB,IAAhBjK,EAAQiK,MACtBG,EAAAhF,EAAAiF,cAAA,OAAKzF,IAAK5E,EAAQyM,IAAKnC,UAAU,WAC7BF,EAAAhF,EAAAiF,cAAA,OAAKqC,IAAKC,iBAAe3M,EAAQ+C,aAAe4J,iBAAevM,QAC/DgK,EAAAhF,EAAAiF,cAAA,OAAKC,UAAU,mBACXF,EAAAhF,EAAAiF,cAAA,SACID,EAAAhF,EAAAiF,cAACI,EAAArF,EAAD,CAAemB,KAAMvG,EAAQgD,MACd0H,eAAe,eACfC,eAAe,eACfC,WAAW,QACXC,WAAY,SAACtE,GAAQ4D,EAAK3D,iBAAiBD,EAAK3B,MAE/DwF,EAAAhF,EAAAiF,cAAA,SAAOC,UAAU,aAAasC,KAAK,OAAOnK,GAAI,aAAamC,EAAKiI,SAAU1C,EAAKhH,YAEnFiH,EAAAhF,EAAAiF,cAACY,EAAA,EAAD,CAAiBD,QAAS,SAAC3I,GAAK8H,EAAKzL,aAAa2D,EAAE,EAAEuC,IAAOsG,KAAM4B,MACnE1C,EAAAhF,EAAAiF,cAACY,EAAA,EAAD,CAAiBC,KAAM6B,MACvB3C,EAAAhF,EAAAiF,cAAC2C,EAAA5H,EAAD,CAAQ6H,QAAS,CAACC,KAAM,gBAAgBC,MAAO,gBACvC/N,MAAqC,IAA9BY,EAAQf,aAAaL,OAC5BwO,kBAAgB,QAChBP,SAAU,SAACxK,EAAEzD,GAAUuL,EAAKzL,aAAa2D,EAAEzD,EAAOgG,MAC1DwF,EAAAhF,EAAAiF,cAAA,QAAMW,QAAS,SAAC3I,EAAEjD,GAAW+K,EAAKkD,UAAUzI,EAAI,KAC5CwF,EAAAhF,EAAAiF,cAACY,EAAA,EAAD,CAAiBC,KAAMoC,SAKrB,IAAhBtN,EAAQiK,KACVG,EAAAhF,EAAAiF,cAAA,OAAKzF,IAAK5E,EAAQyM,IAAKnC,UAAU,WAC7BF,EAAAhF,EAAAiF,cAAA,OAAKqC,IAAKC,iBAAe3M,EAAQ+C,aAAe4J,iBAAevM,QAC/DgK,EAAAhF,EAAAiF,cAAA,OAAKC,UAAU,mBACXF,EAAAhF,EAAAiF,cAAA,OAAKC,UAAU,UACXF,EAAAhF,EAAAiF,cAAA,kBACAD,EAAAhF,EAAAiF,cAAC2C,EAAA5H,EAAD,CAAQ6H,QAAS,CAACC,KAAM,gBAAgBC,MAAO,gBACvC/N,MAAOY,EAAQf,aAAa2B,MAC5BiM,SAAU,SAACxK,EAAEjD,GAAS+K,EAAK7K,WAAW,QAAQF,EAAMwF,MAC5DwF,EAAAhF,EAAAiF,cAAA,mBACAD,EAAAhF,EAAAiF,cAAC2C,EAAA5H,EAAD,CAAQ6H,QAAS,CAACC,KAAM,gBAAgBC,MAAO,gBACvC/N,MAAOY,EAAQf,aAAagC,OAC5B4L,SAAU,SAACxK,EAAEjD,GAAS+K,EAAK7K,WAAW,SAASF,EAAMwF,MAC7DwF,EAAAhF,EAAAiF,cAAA,uBACAD,EAAAhF,EAAAiF,cAAC2C,EAAA5H,EAAD,CAAQ6H,QAAS,CAACC,KAAM,gBAAgBC,MAAO,gBACvC/N,MAAOY,EAAQf,aAAa8B,WAC5B8L,SAAU,SAACxK,EAAEjD,GAAS+K,EAAK7K,WAAW,aAAaF,EAAMwF,MACjEwF,EAAAhF,EAAAiF,cAAA,KAAGW,QAAS,SAAC3I,EAAEjD,GAAW+K,EAAKkD,UAAUzI,EAAI,KACzCwF,EAAAhF,EAAAiF,cAACY,EAAA,EAAD,CAAiBC,KAAMqC,aAQ/CnD,EAAAhF,EAAAiF,cAAA,WACID,EAAAhF,EAAAiF,cAACU,EAAA3F,EAAD,CAAQkF,UAAW,gBAAiBU,QAAStO,KAAKmG,WAAWiI,KAAKpO,OAC9D0N,EAAAhF,EAAAiF,cAACY,EAAA,EAAD,CAAiBC,KAAMsC,SAInCpD,EAAAhF,EAAAiF,cAAA,OAAKC,UAAU,sBACXF,EAAAhF,EAAAiF,cAAA,OAAKC,UAAU,WAAWkB,MAAO,CAACiC,KAAS/Q,KAAKqC,MAAM+C,YAAY,IAASpF,KAAKqC,MAAMsC,WACtF+I,EAAAhF,EAAAiF,cAAA,OAAKC,UAAU,YACXF,EAAAhF,EAAAiF,cAAA,OAAKC,UAAU,YACd5N,KAAKqC,MAAMD,YAAYsN,IAAI,SAACpM,EAAQC,GAAT,OACxBmK,EAAAhF,EAAAiF,cAAA,OAAKzF,IAAK5E,EAAQyM,IAAKnC,UAAU,kBAAkB7H,GAAI,WAAWxC,GAC7DD,EAAQG,WAAWiM,IAAI,SAACsB,EAAUrN,GAAX,OACpB+J,EAAAhF,EAAAiF,cAACsD,EAAAvI,EAAD,CAAWR,IAAK8I,EAAUjB,IAAKmB,OAAQ,YAAY3N,EAAI4N,KAAK,IAAIC,gBAAiB,CAACnL,EAAI+K,EAAUtM,SAAS2M,EAAE,GAAIC,OAAQ7D,EAAK/H,YACxHgI,EAAAhF,EAAAiF,cAAA,OAAK5H,GAAI,SAASxC,EAAG,IAAII,EAAIiK,UAAU,gBACnCF,EAAAhF,EAAAiF,cAAA,OAAKC,UAAU,SAAf,cACYoD,EAAUjL,GADtB,MAC6B0H,EAAKmB,SAAUoC,EAAUtM,SAAW+I,EAAKpL,MAAMsC,QAAW,MAEvF+I,EAAAhF,EAAAiF,cAAC4D,EAAA7I,EAAD,CACI1H,OAAQgQ,EAAUhQ,OAClBwQ,OAAQR,EAAUhQ,SAAWgQ,EAAUhQ,OAAOyK,UAAY,IAAMgC,EAAKpL,MAAMsC,QAC3E8M,OAAQ,GACRC,UAAW,CAEPC,SAAS,EAETtC,MAAO,UAEPuC,WAAY,KAGpBlE,EAAAhF,EAAAiF,cAACU,EAAA3F,EAAD,CAAQkF,UAAU,cAAcU,QAASb,EAAKlH,YAAY6H,KAAKX,EAAKlK,EAAGI,IACnE+J,EAAAhF,EAAAiF,cAACY,EAAA,EAAD,CAAiBC,KAAMsB,wBAzmBtD+B,aCHDC,QACW,cAA7BxJ,OAAO5D,SAASqN,UAEe,UAA7BzJ,OAAO5D,SAASqN,UAEhBzJ,OAAO5D,SAASqN,SAASC,MACvB,2DCZNC,IAASC,OAAOxE,EAAAhF,EAAAiF,cAACwE,EAAD,MAAYnI,SAASoI,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrL,KAAK,SAAAsL,GACjCA,EAAaC,iCEnInBC,EAAOC,QAAQ1C,eAAiB,CAC5B2C,OAAW,uBACXC,MAAU,sBACVC,KAAS,uBACTC,MAAU,sBACVrP,MAAU","file":"static/js/main.c653143a.chunk.js","sourcesContent":["function BufferLoader(context, urlList, callback) {\n    console.log('new bufer')\n    this.context = context;\n    this.urlList = urlList;\n    this.onload = callback;\n    this.bufferList = new Array();\n    this.loadCount = 0;\n}\n\nBufferLoader.prototype.loadBuffer = function(url, index) {\n    console.log('load bufer')\n    // Load buffer asynchronously\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n\n    var loader = this;\n\n    request.onload = function() {\n        // Asynchronously decode the audio file data in request.response\n        loader.context.decodeAudioData(\n            request.response,\n            function(buffer) {\n                if (!buffer) {\n                    alert('error decoding file data: ' + url);\n                    return;\n                }\n                loader.bufferList[index] = buffer;\n                if (++loader.loadCount == loader.urlList.length)\n                    loader.onload(loader.bufferList);\n            },\n            function(error) {\n                console.error('decodeAudioData error', error);\n            }\n        );\n    }\n\n    request.onerror = function() {\n        alert('BufferLoader: XHR error');\n    }\n\n    request.send();\n}\n\nBufferLoader.prototype.load = function() {\n    console.log(this.urlList);\n    for (var i = 0; i < this.urlList.length; ++i)\n        this.loadBuffer(this.urlList[i], i);\n}\n\nexport default BufferLoader;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport Button from '@material-ui/core/Button'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMagic,faStepBackward,faCloudDownloadAlt,faFileExport, faPlay,faStop,faMusic,faVolumeMute, faHeadphones,faPause,faPlus,faWindowClose,faSave } from '@fortawesome/free-solid-svg-icons'\nimport Slider from '@material-ui/lab/Slider';\nimport BufferLoader from '../scripts/BufferLoader'\nimport Draggable from 'react-draggable';\nimport Waveform from 'waveform-react';\nimport {InstrumentImgs} from '../assets/instrumentsImgs';\nimport EditableLabel from 'react-inline-editing';\nimport axios from 'axios';\nimport Recorder from 'recorderjs';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nclass Studio extends Component {\n    constructor(props){\n        super(props);\n        const that = this;\n        let urlparams = (new URL(document.location)).searchParams;\n        let id = urlparams.get(\"id\");\n        window.AudioContext = window.AudioContext || window.webkitAudioContext;\n        this.state = {\n            volume: 100,\n            spacing: 8,\n            runningTime: 0,\n            playing: true,\n            playbackTime: 0,\n            channelData: [],\n            loading:true,\n            songId: id,\n            title: 'New Song',\n            bpm: 120,\n            newAudioFiles: [],\n            context: new AudioContext(),\n            key: 'Cmaj',\n            timeSignature: '4/4',\n            deletedChannels: []\n        };\n        this.state.context.suspend();\n        this.getImpulse();\n        axios.post('https://shenkar-band-it.herokuapp.com/studio/getDataForStudio',{id})\n            .then((res)=>{\n            res = res.data;\n            that.setState({channelData: res.channels, title: res.title, bpm: res.bpm, key: res.key, timeSignature: res.timeSignature, lastExportedUrl: res.lastExportedUrl});\n            console.log(this.state);\n            let loadingCounter = 0;\n            if (res.channels.length > 0) {\n                res.channels.forEach((channel, index) => {\n                    const gainNode = that.state.context.createGain();\n                    res.channels[index].gainNode = gainNode;\n                    if (channel.audioFiles.length > 0) {\n                        const mappedAudioUrls = [];\n                        channel.audioFiles.forEach((audioClip) => {\n                            mappedAudioUrls.push(audioClip.audioUrl);\n                        });\n                        const bufferLoader = new BufferLoader(\n                            that.state.context,\n                            mappedAudioUrls,\n                            finishedLoading\n                        );\n                        bufferLoader.load();\n                    } else {\n                        finishedLoading([]);\n                    }\n\n                    function finishedLoading(bufferList) {\n                        loadingCounter++;\n                        console.log(loadingCounter);\n                        bufferList.forEach((buffer, bufferIndex) => {\n                            res.channels[index].audioFiles[bufferIndex].buffer = buffer;\n                        });\n                        if (loadingCounter === res.channels.length) {\n                            that.setState({loading: false});\n                            that.setState({channelData: res.channels});\n                        }\n                    }\n                })\n            } else {\n                that.setState({loading: false});\n            }\n        });\n\n    }\n\n    msToTime(s) {\n\n        // Pad to 2 or 3 digits, default is 2\n        function pad(n, z) {\n            z = z || 2;\n            return ('00' + n).slice(-z);\n        }\n\n        var ms = s % 1000;\n        s = (s - ms) / 1000;\n        var secs = s % 60;\n        s = (s - secs) / 60;\n        var mins = s % 60;\n\n        return pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n    }\n\n\n    changeVolume = (event, volume,channelIndex) => {\n        console.log(event,volume,channelIndex);\n        let channelData = this.state.channelData;\n        channelData[channelIndex].edited = true;\n        channelData[channelIndex].audioEffects.volume = volume / 100;\n        channelData[channelIndex].gainNode.gain.value = volume / 100;\n        this.setState({ channelData });\n    };\n\n    editEffect = (effect,value,channelIndex) => {\n        let channelData = this.state.channelData;\n        channelData[channelIndex].edited = true;\n        channelData[channelIndex].audioEffects[effect] = value;\n        this.setState({channelData});\n    };\n\n\n    updateSongLength() {\n        let length = 0;\n        this.state.channelData.forEach((channel) => {\n            channel.audioFiles.forEach((audioFile) => {\n                console.log('duration',audioFile.buffer.duration);\n               const audioDuration = (audioFile.location / this.state.spacing) + audioFile.buffer.duration;\n               if (audioDuration > length) {\n                   length = audioDuration;\n               }\n            })\n        });\n        this.setState({length});\n        return length;\n    }\n\n    playAll = (recording) => {\n        let channelData = this.state.channelData;\n        const that = this;\n        this.state.context.resume();\n        const mainGain = that.state.context.createGain();\n        this.setState({mainGain});\n        this.state.channelData.forEach((channel,ci)=>{\n            if (!this.state.suspended) {\n                channel.audioFiles.forEach((audio, ai) => {\n                    let bufferSource = that.state.context.createBufferSource();\n                    let initNode = that.state.context.createGain();\n                    bufferSource.buffer = audio.buffer;\n                    bufferSource.connect(initNode);\n                    let delayNode = this.addDelayEffect(initNode,channel.audioEffects.delay);\n                    let distortionNode = this.addDistortionEffect(delayNode,channel.audioEffects.distortion);\n                    let reverbNode = this.addReverbEffect(distortionNode,channel.audioEffects.reverb);\n                    reverbNode.connect(channel.gainNode);\n                    channel.gainNode.connect(mainGain);\n                    bufferSource.start(that.state.context.currentTime + audio.location / this.state.spacing);\n                    channelData[ci].audioFiles[ai].bufferSource = bufferSource;\n                    console.log('recording',recording);\n                    channel.gainNode.gain.value = channel.audioEffects.volume;\n                    if (!recording) {\n                        channel.gainNode.connect(that.state.context.destination);\n                    } else {\n                        channel.gainNode.disconnect();\n                    }\n                    this.setState({channelData});\n                    return mainGain;\n                })\n            } else {\n                this.setState({suspended:false})\n            }\n        });\n        this.setState(state => {\n            if (state.status) {\n                clearInterval(this.timer);\n            } else {\n                const startTime = Date.now() - this.state.runningTime;\n                this.timer = setInterval(() => {\n                    this.setState({ runningTime: Date.now() - startTime });\n                });\n            }\n            return { status: !state.status };\n        });\n    };\n    pauseAll = () => {\n        clearInterval(this.timer);\n        this.state.context.suspend();\n        this.setState({status: false, suspended: true });\n    };\n    stopAll = () => {\n        clearInterval(this.timer); // new\n        const that = this;\n        this.state.context.suspend();\n        this.state.channelData.forEach((channel)=>{\n            channel.audioFiles.forEach((audio) => {\n                audio.bufferSource.stop(that.state.context.currentTime);\n            });\n        });\n\n        this.setState({runningTime: 0, status: false, suspended: false});\n    };\n\n    handleDrag = (e,data) => {\n        const channelData = this.state.channelData;\n        const loc = data.node.id.split('-');\n        channelData[loc[1]].audioFiles[loc[2]].location = data.x;\n        if (!channelData[loc[1]].new) {\n            channelData[loc[1]].edited = true;\n        }\n        this.setState(channelData);\n    };\n\n    addChannel = () => {\n        //TODO Create context and gain node\n        console.log(\"add channel\")\n        let channelData = this.state.channelData;\n        channelData.push({\n            'instrument': 'audio',\n            'title': 'New Channel',\n            'audioEffects': {\n                volume: 1,\n                distortion:0,\n                delay:0,\n                reverb:0,\n            },\n            'audioFiles': [],\n            'new': true\n        });\n        this.setState({channelData})\n    };\n\n    deleteAudio = (ci,ai) => {\n        let channelData = this.state.channelData;\n        if (channelData[ci].audioFiles[ai].bufferSource) {\n            channelData[ci].audioFiles[ai].bufferSource.disconnect();\n        }\n        channelData[ci].audioFiles.splice(ai,1);\n        if (!channelData[ci].new) {\n            channelData[ci].edited = true;\n        }\n        this.setState({channelData});\n    };\n\n    onUpload = (e) => {\n        this.setState({loading:true});\n        const reader1 = new FileReader();\n        const ci = e.target.id.split('-')[2];\n        let channelData = this.state.channelData;\n        const that = this;\n        const file = e.target.files[0];\n        reader1.onload = function(ev) {\n            that.state.context.decodeAudioData(ev.target.result).then(function(buffer) {\n                // Initial FormData\n                // file.timeId = new Date().getTime();\n                console.log(file);\n                const newAudioFiles = that.state.newAudioFiles;\n                newAudioFiles.push(file);\n                that.setState({newAudioFiles})\n                // formData.append(\"file\", file);\n                // formData.append(\"upload_preset\", \"biwlw0dl\");\n                // formData.append(\"api_key\", \"228417225742266\");\n                // formData.append(\"timestamp\", (Date.now() / 1000) | 0);\n                // axios.post(\"https://api.cloudinary.com/v1_1/voiera/video/upload\", formData, {\n                //     headers: { \"X-Requested-With\": \"XMLHttpRequest\" },\n                // }).then(response => {\n                // const data = response.data;\n                if (!channelData[ci].new) {\n                    channelData[ci].edited = true;\n                }\n                channelData[ci].audioFiles.push({\n                    location:0,\n                    name: file.name,\n                    size: file.size,\n                    // audioUrl: data.secure_url,\n                });\n                that.setState({channelData});\n                // BUG FIX\n                channelData[ci].audioFiles[channelData[ci].audioFiles.length - 1].buffer = buffer;\n                that.setState({channelData,loading: false});\n            });\n        };\n        reader1.readAsArrayBuffer(file);\n\n    };\n\n    saveSong = () => {\n        this.setState({loading:true});\n        const formData = new FormData();\n        this.state.newAudioFiles.forEach((audio) =>{\n            formData.append('newAudioFiles',audio);\n        });\n        const length = this.updateSongLength();\n        formData.append('channels',JSON.stringify(this.state.channelData));\n        formData.append('deletedChannels',JSON.stringify(this.state.deletedChannels));\n        formData.append('songId',this.state.songId);\n        formData.append('title',this.state.title);\n        formData.append('bpm',this.state.bpm);\n        formData.append('timeSignature',this.state.timeSignature);\n        formData.append('key',this.state.key);\n        formData.append('length',this.state.length);\n        axios.post('https://shenkar-band-it.herokuapp.com/studio/saveDataInStudio',formData).then((res)=>{\n            window.alert(res);\n            this.setState({loading:false})\n        })\n    };\n\n    downloadLink = async () => {\n        this.setState({saving:true});\n        const length = this.updateSongLength();\n        await this.playAll(true);\n        var rec = new Recorder(this.state.mainGain);\n        rec.record();\n        setTimeout(async ()=>{\n            rec.stop();\n            await this.stopAll();\n            rec.exportWAV((blob) => {\n                const file = new File([blob], \"export.wav\");\n                this.uploadNewExport(file);\n            })\n        },length * 1000)\n    };\n\n    uploadNewExport(file) {\n        const formData = new FormData();\n        formData.append('export',file);\n        formData.append('songId',this.state.songId);\n        axios.post('https://shenkar-band-it.herokuapp.com/studio/exportSong',formData).then((res)=>{\n            this.setState({saving:false});\n        })\n    }\n\n    editTitle = (text) => {\n        //TODO handle empty string\n        this.setState({title:text})\n    };\n\n    editChannelLabel = (text,ci) => {\n        let channelData = this.state.channelData;\n        channelData[ci].edited = true;\n        channelData[ci].title = text;\n        this.setState({channelData})\n    };\n\n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n\n    addDistortionEffect(stream,effectValue) {\n        let audioCtx = this.state.context;\n        let value = effectValue/50;\n        let masterNode = audioCtx.createGain();\n        let distortionGainNode = audioCtx.createGain();\n        let distortionNode = audioCtx.createWaveShaper();\n        distortionNode.curve = makeDistortionCurve(200);\n        stream.connect(distortionNode);\n        distortionNode.connect(distortionGainNode);\n        distortionGainNode.gain.value = value;\n        let bypassNode = audioCtx.createGain();\n        stream.connect(bypassNode);\n        bypassNode.connect(masterNode);\n        bypassNode.gain.value = 1;\n        distortionGainNode.connect(masterNode);\n        return masterNode;\n\n        function makeDistortionCurve(amount) {\n            var k = amount,\n                n_samples = 44100,\n                curve = new Float32Array(n_samples),\n                deg = Math.PI / 180,\n                i = 0,\n                x;\n            for ( ; i < n_samples; ++i ) {\n                x = i * 2 / n_samples - 1;\n                curve[i] = (3 + k)*Math.atan(Math.sinh(x*0.25)*5) / (Math.PI + k * Math.abs(x));\n            }\n            return curve;\n        }\n    }\n\n    getImpulse() {\n        let impulseUrl = 'https://res.cloudinary.com/voiera/video/upload/v1560524168/BIG_HALL_E001_M2S_d0yywu.wav';\n        let ajaxRequest = new XMLHttpRequest();\n        let that = this;\n        ajaxRequest.open('GET', impulseUrl, true);\n        ajaxRequest.responseType = 'arraybuffer';\n\n        ajaxRequest.onload = function() {\n            var impulseData = ajaxRequest.response;\n            that.state.context.decodeAudioData(impulseData).then(function(buffer) {\n                that.setState({convolverBuffer:buffer});\n            });\n        };\n        ajaxRequest.send();\n    }\n\n    addReverbEffect(stream,effectValue) {\n        let value = effectValue/10;\n        let audioCtx = this.state.context;\n        let masterNode = audioCtx.createGain();\n        let bypassNode = audioCtx.createGain();\n        let convolverGainNode = audioCtx.createGain();\n        let convolver = audioCtx.createConvolver();\n        convolver.buffer = this.state.convolverBuffer;\n        stream.connect(convolver);\n        convolver.connect(convolverGainNode);\n        convolverGainNode.gain.value = value;\n        convolverGainNode.connect(masterNode);\n        stream.connect(bypassNode);\n        bypassNode.gain.value = 1;\n        bypassNode.connect(masterNode);\n        return masterNode;\n    }\n\n\n    addDelayEffect(stream,effectValue) {\n        let value = effectValue/100;\n        console.log(value);\n        let audioCtx = this.state.context;\n        //create an audio node from the stream\n        let streamNode = stream;\n        let delayNode = audioCtx.createDelay(100)\n        let feedbackNode = audioCtx.createGain();\n        let bypassNode = audioCtx.createGain();\n        let masterNode = audioCtx.createGain();\n\n        //controls\n        delayNode.delayTime.value = 1.04;\n        feedbackNode.gain.value = 0.5;\n        bypassNode.gain.value = value;\n\n        //wire up nodes\n        streamNode.connect(delayNode);\n        delayNode.connect(feedbackNode);\n        feedbackNode.connect(delayNode);\n\n        delayNode.connect(bypassNode);\n        bypassNode.connect(masterNode);\n        streamNode.connect(masterNode);\n\n        // masterNode.connect(audioCtx.destination);\n        return masterNode;\n    }\n\n    changeTab(channelIndex, value) {\n        let channelData = this.state.channelData;\n        channelData[channelIndex].tab = value;\n        this.setState({channelData})\n    }\n\n    editBPM(bpm) {\n        this.setState({bpm})\n    }\n    editTimeSignature(timeSignature) {\n        this.setState({timeSignature})\n    }\n    editKey(key) {\n        this.setState({key})\n    }\n\n    deleteChannel(ci) {\n        let channelData = this.state.channelData;\n        let deletedChannels = this.state.deletedChannels;\n        let currentDeletedChannel = channelData.splice(ci,1);\n        deletedChannels.push(currentDeletedChannel[0]);\n        this.setState({channelData,deletedChannels});\n    }\n\n    render() {\n        return (\n            <div>\n                { this.state.loading || this.state.saving ? <div className=\"loading\">\n                    <CircularProgress size={80} thickness={5} />\n                    {this.state.loading ? <p>Loading...</p> : <p>Exporting to MP3, This may take a while</p> }\n                </div> : ''}\n                <div className=\"header\">\n                    <div className=\"songDetails\">\n                        {!this.state.loading ?\n                            <EditableLabel text={this.state.title}\n                                           labelClassName='songTitle'\n                                           inputClassName='songTitle'\n                                           inputWidth='300px'\n                                           onFocusOut={this.editTitle.bind(this)}\n                            /> : ''\n                        }\n                    </div>\n                    <div className=\"controls\">\n                        <Button className={\"controlButton\"} onClick={this.stopAll}>\n                            <FontAwesomeIcon icon={faStop}/>\n                        </Button>\n                        <Button className={\"controlButton\"} onClick={this.pauseAll}>\n                            <FontAwesomeIcon icon={faPause}/>\n                        </Button>\n                        <Button className={\"controlButton\"} onClick={()=>{this.playAll()}}>\n                            <FontAwesomeIcon icon={faPlay}/>\n                        </Button>\n                        <Button className={\"controlButton\"}>\n                            {this.msToTime(this.state.runningTime)}\n                        </Button>\n                        <Button className={\"controlButton\"}>\n                            <EditableLabel text={this.state.bpm}\n                                           labelClassName='bpmTitle'\n                                           inputClassName='bpmTitle'\n                                           inputWidth='38px'\n                                           onFocusOut={(data)=>{this.editBPM(data)}}\n                            />BPM\n                        </Button>\n                        <Button className={\"controlButton\"}>\n                            <FontAwesomeIcon style={{'marginRight': '10px'}} icon={faMusic}/>\n                            {!this.state.loading ?\n                                <EditableLabel text={this.state.key}\n                                               labelClassName='bpmTitle'\n                                               inputClassName='bpmTitle'\n                                               inputWidth='38px'\n                                               onFocusOut={(data) => {\n                                                   this.editKey(data)\n                                               }}\n                                /> : ''\n                            }\n                        </Button>\n                        <Button className={\"controlButton\"}>\n                            {!this.state.loading ?\n                                <EditableLabel text={this.state.timeSignature}\n                                               labelClassName='bpmTitle'\n                                               inputClassName='bpmTitle'\n                                               inputWidth='38px'\n                                               onFocusOut={(data) => {\n                                                   this.editTimeSignature(data)\n                                               }}\n                                /> : ''\n                            }\n                        </Button>\n                        <Button className={\"controlButton\"}>\n                            <FontAwesomeIcon style={{\"marginRight\": '10px'}} icon={faSave} onClick={this.saveSong.bind(this)}/> Save\n                        </Button>\n                        <Button className={\"controlButton\"}>\n                            <FontAwesomeIcon style={{\"marginRight\": '10px'}} icon={faFileExport} onClick={() => {this.downloadLink()}}/> Export\n                        </Button>\n                        {this.state.lastExportedUrl ?\n                        <Button className={\"controlButton\"}>\n                            <a style={{color:'inherit', textDecoration:'none'}} href={this.state.lastExportedUrl} download>\n                            <FontAwesomeIcon style={{\"marginRight\": '10px'}} icon={faCloudDownloadAlt}/> Download\n                            </a>\n                        </Button>\n                        : ''}\n                    </div>\n                </div>\n                    <div className=\"channels\">\n                        {this.state.channelData.map((channel,key) =>\n                            <div style={{position:'relative'}}>\n                                <div class=\"deleteChannel\" onClick={() => {this.deleteChannel(key)}}>\n                                    <FontAwesomeIcon icon={faWindowClose}/>\n                                </div>\n                                {(!channel.tab || channel.tab === 0) &&\n                                    <div key={channel._id} className=\"channel\">\n                                        <img src={InstrumentImgs[channel.instrument] || InstrumentImgs.audio}/>\n                                        <div className=\"channel-details\">\n                                            <p>\n                                                <EditableLabel text={channel.title}\n                                                               labelClassName='channelTitle'\n                                                               inputClassName='channelTitle'\n                                                               inputWidth='300px'\n                                                               onFocusOut={(text)=>{this.editChannelLabel(text,key)}}\n                                                />\n                                                <input className=\"fileUpload\" type='file' id={'upload-ch-'+key} onChange={this.onUpload} />\n                                                </p>\n                                            <FontAwesomeIcon onClick={(e)=>{this.changeVolume(e,0,key)}} icon={faVolumeMute}/>\n                                            <FontAwesomeIcon icon={faHeadphones}/>\n                                            <Slider classes={{root: \"volume-slider\",track: \"volume-track\"}}\n                                                    value={channel.audioEffects.volume * 100}\n                                                    aria-labelledby=\"label\"\n                                                    onChange={(e,volume)=>{this.changeVolume(e,volume,key)}}/>\n                                            <span onClick={(e,value) => {this.changeTab(key,1)}}>\n                                                <FontAwesomeIcon icon={faMagic}/>\n                                            </span>\n                                        </div>\n                                    </div>\n                                }\n                                {(channel.tab === 1) &&\n                                <div key={channel._id} className=\"channel\">\n                                    <img src={InstrumentImgs[channel.instrument] || InstrumentImgs.audio}/>\n                                    <div className=\"channel-details\">\n                                        <div className=\"effect\">\n                                            <p>Delay</p>\n                                            <Slider classes={{root: \"volume-slider\",track: \"volume-track\"}}\n                                                    value={channel.audioEffects.delay}\n                                                    onChange={(e,value)=>{this.editEffect('delay',value,key)}}/>\n                                            <p>Reverb</p>\n                                            <Slider classes={{root: \"volume-slider\",track: \"volume-track\"}}\n                                                    value={channel.audioEffects.reverb}\n                                                    onChange={(e,value)=>{this.editEffect('reverb',value,key)}}/>\n                                            <p>Distortion</p>\n                                            <Slider classes={{root: \"volume-slider\",track: \"volume-track\"}}\n                                                    value={channel.audioEffects.distortion}\n                                                    onChange={(e,value)=>{this.editEffect('distortion',value,key)}}/>\n                                            <p onClick={(e,value) => {this.changeTab(key,0)}}>\n                                                <FontAwesomeIcon icon={faStepBackward}/>\n                                            </p>\n                                        </div>\n                                    </div>\n                                </div>\n                                }\n                            </div>\n                        )}\n                        <div>\n                            <Button className={\"controlButton\"} onClick={this.addChannel.bind(this)}>\n                                <FontAwesomeIcon icon={faPlus}/>\n                            </Button>\n                        </div>\n                    </div>\n                    <div className=\"timeline-container\">\n                        <div className=\"playLine\" style={{'left': (this.state.runningTime/1000) * (this.state.spacing)}}/>\n                        <div className=\"timeline\">\n                            <div className=\"timebar\"></div>\n                            {this.state.channelData.map((channel,ci) =>\n                                <div key={channel._id} className=\"timebar-channel\" id={\"channel-\"+ci}>\n                                    {channel.audioFiles.map((audioclip,ai) =>\n                                        <Draggable key={audioclip._id} bounds={\"#channel-\"+ci} axis=\"x\" defaultPosition={{'x':audioclip.location,y:0}} onDrag={this.handleDrag}>\n                                            <div id={'audio-'+ci+'-'+ai} className=\"audioSnippet\">\n                                                <div className=\"title\">\n                                                Audio File {audioclip.id} : {this.msToTime((audioclip.location / this.state.spacing) * 1000)}\n                                                </div>\n                                                <Waveform\n                                                    buffer={audioclip.buffer}\n                                                    width={(audioclip.buffer && (audioclip.buffer.duration || 0)) * this.state.spacing}\n                                                    height={60}\n                                                    waveStyle={{\n                                                        // animate waveform on draw (default: true)\n                                                        animate: true,\n                                                        // waveform color\n                                                        color: '#95adc9',\n                                                        // width of each rendered point (min: 1, max: 10)\n                                                        pointWidth: 1\n                                                    }}\n                                                />\n                                                <Button className=\"deleteAudio\" onClick={this.deleteAudio.bind(this,ci,ai)}>\n                                                    <FontAwesomeIcon icon={faWindowClose}/>\n                                                </Button>\n                                            </div>\n                                        </Draggable>\n                                    )}\n                                </div>\n                            )}\n\n                        </div>\n\n                    </div>\n            </div>\n        );\n    }\n}\n\nexport default Studio;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Studio from './components/studio';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Studio />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports.InstrumentImgs = {\n    'guitar' : '../images/guitar.png',\n    'vocal' : '../images/vocal.png',\n    'bass' : '../images/guitar.png',\n    'drums' : '../images/drums.png',\n    'audio' : '../images/audio.png'\n}"],"sourceRoot":""}