{"version":3,"sources":["scripts/BufferLoader.js","components/studio.js","serviceWorker.js","index.js","assets/instrumentsImgs.js"],"names":["BufferLoader","context","urlList","callback","console","log","this","onload","bufferList","Array","loadCount","prototype","loadBuffer","url","index","request","XMLHttpRequest","open","responseType","loader","decodeAudioData","response","buffer","length","alert","error","onerror","send","load","i","Studio","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeVolume","event","volume","channelIndex","channelData","state","edited","audioEffects","gainNode","gain","value","setState","editEffect","effect","playAll","recording","that","assertThisInitialized","resume","mainGain","createGain","forEach","channel","ci","suspended","audioFiles","audio","ai","bufferSource","createBufferSource","initNode","connect","delayNode","addDelayEffect","delay","distortionNode","addDistortionEffect","distortion","addReverbEffect","reverb","start","currentTime","location","spacing","connectedToDestination","disconnect","destination","status","clearInterval","timer","startTime","Date","now","runningTime","setInterval","pauseAll","suspend","stopAll","stop","handleDrag","e","data","loc","node","id","split","x","new","addChannel","newGainNode","push","instrument","title","deleteAudio","splice","onUpload","loading","reader1","FileReader","target","file","files","ev","result","then","newAudioFiles","name","size","readAsArrayBuffer","saveSong","formData","FormData","append","updateSongLength","JSON","stringify","deletedChannels","songId","bpm","timeSignature","key","axios","post","res","window","downloadLink","asyncToGenerator","regenerator_default","a","mark","_callee2","rec","wrap","_context2","prev","next","saving","Recorder","workerPath","record","setTimeout","_callee","_context","exportWAV","blob","File","uploadNewExport","editTitle","text","editChannelLabel","URL","document","searchParams","get","AudioContext","webkitAudioContext","playing","playbackTime","getImpulse","channels","lastExportedUrl","loadingCounter","mappedAudioUrls","audioClip","audioUrl","finishedLoading","bufferIndex","catch","err","s","pad","n","z","slice","ms","secs","_this2","audioFile","duration","audioDuration","_this3","stream","effectValue","audioCtx","masterNode","distortionGainNode","createWaveShaper","curve","amount","k","Float32Array","Math","PI","atan","sinh","abs","makeDistortionCurve","bypassNode","ajaxRequest","impulseData","convolverBuffer","convolverGainNode","convolver","createConvolver","streamNode","createDelay","feedbackNode","delayTime","tab","currentDeletedChannel","_this4","react_default","createElement","className","CircularProgress_default","thickness","main_bundle_default","labelClassName","inputClassName","inputWidth","onFocusOut","bind","Button_default","onClick","index_es","icon","faStop","faPause","faPlay","msToTime","editBPM","style","marginRight","faMusic","editKey","editTimeSignature","faSave","faFileExport","color","textDecoration","href","download","faCloudDownloadAlt","map","position","class","deleteChannel","faWindowClose","_id","src","InstrumentImgs","type","onChange","faVolumeMute","faHeadphones","Slider_default","classes","root","track","aria-labelledby","changeTab","faMagic","faStepBackward","faPlus","left","audioclip","react_draggable_default","bounds","axis","defaultPosition","y","onDrag","lib_default","width","height","waveStyle","animate","pointWidth","Component","Boolean","hostname","match","ReactDOM","render","studio","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","guitar","vocal","bass","drums"],"mappings":"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","file":"static/js/main.456730f7.chunk.js","sourcesContent":["function BufferLoader(context, urlList, callback) {\n    console.log('new bufer')\n    this.context = context;\n    this.urlList = urlList;\n    this.onload = callback;\n    this.bufferList = new Array();\n    this.loadCount = 0;\n}\n\nBufferLoader.prototype.loadBuffer = function(url, index) {\n    console.log('load bufer')\n    // Load buffer asynchronously\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n\n    var loader = this;\n\n    request.onload = function() {\n        // Asynchronously decode the audio file data in request.response\n        loader.context.decodeAudioData(\n            request.response,\n            function(buffer) {\n                if (!buffer) {\n                    alert('error decoding file data: ' + url);\n                    return;\n                }\n                loader.bufferList[index] = buffer;\n                if (++loader.loadCount == loader.urlList.length)\n                    loader.onload(loader.bufferList);\n            },\n            function(error) {\n                console.error('decodeAudioData error', error);\n            }\n        );\n    }\n\n    request.onerror = function() {\n        alert('BufferLoader: XHR error');\n    }\n\n    request.send();\n}\n\nBufferLoader.prototype.load = function() {\n    console.log(this.urlList);\n    for (var i = 0; i < this.urlList.length; ++i)\n        this.loadBuffer(this.urlList[i], i);\n}\n\nexport default BufferLoader;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport Button from '@material-ui/core/Button'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMagic,faStepBackward,faCloudDownloadAlt,faFileExport, faPlay,faStop,faMusic,faVolumeMute, faHeadphones,faPause,faPlus,faWindowClose,faSave } from '@fortawesome/free-solid-svg-icons'\nimport Slider from '@material-ui/lab/Slider';\nimport BufferLoader from '../scripts/BufferLoader'\nimport Draggable from 'react-draggable';\nimport Waveform from 'waveform-react';\nimport {InstrumentImgs} from '../assets/instrumentsImgs';\nimport EditableLabel from 'react-inline-editing';\nimport axios from 'axios';\nimport Recorder from 'recorderjs';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nclass Studio extends Component {\n    constructor(props){\n        super(props);\n        const that = this;\n        let urlparams = (new URL(document.location)).searchParams;\n        let id = urlparams.get(\"id\");\n        window.AudioContext = window.AudioContext || window.webkitAudioContext;\n        this.state = {\n            volume: 100,\n            spacing: 8,\n            runningTime: 0,\n            playing: true,\n            playbackTime: 0,\n            channelData: [],\n            loading:true,\n            songId: id,\n            title: 'New Song',\n            bpm: 120,\n            newAudioFiles: [],\n            context: new AudioContext(),\n            key: 'Cmaj',\n            timeSignature: '4/4',\n            deletedChannels: []\n        };\n        this.state.context.suspend();\n        this.getImpulse();\n        axios.post('https://shenkar-band-it.herokuapp.com/studio/getDataForStudio',{id})\n            .then((res)=>{\n            res = res.data;\n            that.setState({channelData: res.channels, title: res.title, bpm: res.bpm, key: res.key, timeSignature: res.timeSignature, lastExportedUrl: res.lastExportedUrl});\n            console.log(this.state);\n            let loadingCounter = 0;\n            if (res.channels.length > 0) {\n                res.channels.forEach((channel, index) => {\n                    const gainNode = that.state.context.createGain();\n                    res.channels[index].gainNode = gainNode;\n                    if (channel.audioFiles.length > 0) {\n                        const mappedAudioUrls = [];\n                        channel.audioFiles.forEach((audioClip) => {\n                            mappedAudioUrls.push(audioClip.audioUrl);\n                        });\n                        const bufferLoader = new BufferLoader(\n                            that.state.context,\n                            mappedAudioUrls,\n                            finishedLoading\n                        );\n                        bufferLoader.load();\n                    } else {\n                        finishedLoading([]);\n                    }\n\n                    function finishedLoading(bufferList) {\n                        loadingCounter++;\n                        console.log(loadingCounter);\n                        bufferList.forEach((buffer, bufferIndex) => {\n                            res.channels[index].audioFiles[bufferIndex].buffer = buffer;\n                        });\n                        if (loadingCounter === res.channels.length) {\n                            that.setState({loading: false});\n                            that.setState({channelData: res.channels});\n                        }\n                    }\n                })\n            } else {\n                that.setState({loading: false});\n            }\n        }).catch((err) => {\n            window.alert(err);\n        });\n\n    }\n\n    msToTime(s) {\n\n        // Pad to 2 or 3 digits, default is 2\n        function pad(n, z) {\n            z = z || 2;\n            return ('00' + n).slice(-z);\n        }\n\n        var ms = s % 1000;\n        s = (s - ms) / 1000;\n        var secs = s % 60;\n        s = (s - secs) / 60;\n        var mins = s % 60;\n\n        return pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n    }\n\n\n    changeVolume = (event, volume,channelIndex) => {\n        console.log(event,volume,channelIndex);\n        let channelData = this.state.channelData;\n        channelData[channelIndex].edited = true;\n        channelData[channelIndex].audioEffects.volume = volume / 100;\n        channelData[channelIndex].gainNode.gain.value = volume / 100;\n        this.setState({ channelData });\n    };\n\n    editEffect = (effect,value,channelIndex) => {\n        let channelData = this.state.channelData;\n        channelData[channelIndex].edited = true;\n        channelData[channelIndex].audioEffects[effect] = value;\n        this.setState({channelData});\n    };\n\n\n    updateSongLength() {\n        let length = 0;\n        this.state.channelData.forEach((channel) => {\n            channel.audioFiles.forEach((audioFile) => {\n                console.log('duration',audioFile.buffer.duration);\n               const audioDuration = (audioFile.location / this.state.spacing) + audioFile.buffer.duration;\n               if (audioDuration > length) {\n                   length = audioDuration;\n               }\n            })\n        });\n        this.setState({length});\n        return length;\n    }\n\n    playAll = (recording) => {\n        let channelData = this.state.channelData;\n        const that = this;\n        this.state.context.resume();\n        const mainGain = that.state.context.createGain();\n        this.setState({mainGain});\n        this.state.channelData.forEach((channel,ci)=>{\n            if (!this.state.suspended) {\n                channel.audioFiles.forEach((audio, ai) => {\n                    let bufferSource = that.state.context.createBufferSource();\n                    let initNode = that.state.context.createGain();\n                    bufferSource.buffer = audio.buffer;\n                    bufferSource.connect(initNode);\n                    let delayNode = this.addDelayEffect(initNode,channel.audioEffects.delay);\n                    let distortionNode = this.addDistortionEffect(delayNode,channel.audioEffects.distortion);\n                    let reverbNode = this.addReverbEffect(distortionNode,channel.audioEffects.reverb);\n                    reverbNode.connect(channel.gainNode);\n                    channel.gainNode.connect(mainGain);\n                    bufferSource.start(that.state.context.currentTime + audio.location / this.state.spacing);\n                    channelData[ci].audioFiles[ai].bufferSource = bufferSource;\n                    console.log('recording',recording);\n                    channel.gainNode.gain.value = channel.audioEffects.volume;\n                    if (!recording) {\n                        this.setState({connectedToDestination: true})\n                        channel.gainNode.connect(that.state.context.destination);\n                    } else {\n                        if (this.state.connectedToDestination) {\n                            channel.gainNode.disconnect(that.state.context.destination);\n                        }\n                    }\n                    this.setState({channelData});\n                    return mainGain;\n                })\n            } else {\n                this.setState({suspended:false})\n            }\n        });\n        this.setState(state => {\n            if (state.status) {\n                clearInterval(this.timer);\n            } else {\n                const startTime = Date.now() - this.state.runningTime;\n                this.timer = setInterval(() => {\n                    this.setState({ runningTime: Date.now() - startTime });\n                });\n            }\n            return { status: !state.status };\n        });\n    };\n    pauseAll = () => {\n        clearInterval(this.timer);\n        this.state.context.suspend();\n        this.setState({status: false, suspended: true });\n    };\n    stopAll = () => {\n        clearInterval(this.timer); // new\n        const that = this;\n        this.state.context.suspend();\n        this.state.channelData.forEach((channel)=>{\n            channel.audioFiles.forEach((audio) => {\n                audio.bufferSource.stop(that.state.context.currentTime);\n            });\n        });\n\n        this.setState({runningTime: 0, status: false, suspended: false});\n    };\n\n    handleDrag = (e,data) => {\n        const channelData = this.state.channelData;\n        const loc = data.node.id.split('-');\n        channelData[loc[1]].audioFiles[loc[2]].location = data.x;\n        if (!channelData[loc[1]].new) {\n            channelData[loc[1]].edited = true;\n        }\n        this.setState(channelData);\n    };\n\n    addChannel = () => {\n        let channelData = this.state.channelData;\n        let newGainNode = this.state.context.createGain();\n        channelData.push({\n            'instrument': 'audio',\n            'title': 'New Channel',\n            'audioEffects': {\n                volume: 1,\n                distortion:0,\n                delay:0,\n                reverb:0,\n            },\n            'audioFiles': [],\n            'new': true,\n            'gainNode': newGainNode\n        });\n        this.setState({channelData})\n    };\n\n    deleteAudio = (ci,ai) => {\n        let channelData = this.state.channelData;\n        if (channelData[ci].audioFiles[ai].bufferSource) {\n            channelData[ci].audioFiles[ai].bufferSource.disconnect();\n        }\n        channelData[ci].audioFiles.splice(ai,1);\n        if (!channelData[ci].new) {\n            channelData[ci].edited = true;\n        }\n        this.setState({channelData});\n    };\n\n    onUpload = (e) => {\n        this.setState({loading:true});\n        const reader1 = new FileReader();\n        const ci = e.target.id.split('-')[2];\n        let channelData = this.state.channelData;\n        const that = this;\n        const file = e.target.files[0];\n        reader1.onload = function(ev) {\n            that.state.context.decodeAudioData(ev.target.result).then(function(buffer) {\n                // Initial FormData\n                // file.timeId = new Date().getTime();\n                console.log(file);\n                const newAudioFiles = that.state.newAudioFiles;\n                newAudioFiles.push(file);\n                that.setState({newAudioFiles})\n                // formData.append(\"file\", file);\n                // formData.append(\"upload_preset\", \"biwlw0dl\");\n                // formData.append(\"api_key\", \"228417225742266\");\n                // formData.append(\"timestamp\", (Date.now() / 1000) | 0);\n                // axios.post(\"https://api.cloudinary.com/v1_1/voiera/video/upload\", formData, {\n                //     headers: { \"X-Requested-With\": \"XMLHttpRequest\" },\n                // }).then(response => {\n                // const data = response.data;\n                if (!channelData[ci].new) {\n                    channelData[ci].edited = true;\n                }\n                channelData[ci].audioFiles.push({\n                    location:0,\n                    name: file.name,\n                    size: file.size,\n                    // audioUrl: data.secure_url,\n                });\n                that.setState({channelData});\n                // BUG FIX\n                channelData[ci].audioFiles[channelData[ci].audioFiles.length - 1].buffer = buffer;\n                that.setState({channelData,loading: false});\n            });\n        };\n        reader1.readAsArrayBuffer(file);\n\n    };\n\n    saveSong = () => {\n        this.setState({loading:true});\n        const formData = new FormData();\n        this.state.newAudioFiles.forEach((audio) =>{\n            formData.append('newAudioFiles',audio);\n        });\n        const length = this.updateSongLength();\n        formData.append('channels',JSON.stringify(this.state.channelData));\n        formData.append('deletedChannels',JSON.stringify(this.state.deletedChannels));\n        formData.append('songId',this.state.songId);\n        formData.append('title',this.state.title);\n        formData.append('bpm',this.state.bpm);\n        formData.append('timeSignature',this.state.timeSignature);\n        formData.append('key',this.state.key);\n        formData.append('length',this.state.length);\n        axios.post('https://shenkar-band-it.herokuapp.com/studio/saveDataInStudio',formData).then((res)=>{\n            window.alert('Song Saved!');\n            this.setState({loading:false})\n        })\n    };\n\n    downloadLink = async () => {\n        this.setState({saving:true});\n        const length = this.updateSongLength();\n        await this.playAll(true);\n        console.log('mainGain: ',this.state.mainGain);\n        var rec = new Recorder(this.state.mainGain,{workerPath:'../recorderWorker.js'});\n        rec.record();\n        setTimeout(async ()=>{\n            rec.stop();\n            await this.stopAll();\n            rec.exportWAV((blob) => {\n                const file = new File([blob], \"export.wav\");\n                this.uploadNewExport(file);\n            })\n        },length * 1000)\n    };\n\n    uploadNewExport(file) {\n        const formData = new FormData();\n        formData.append('export',file);\n        formData.append('songId',this.state.songId);\n        axios.post('https://shenkar-band-it.herokuapp.com/studio/exportSong',formData).then((res)=>{\n            if (res.data.lastExportedUrl) {\n                this.setState({lastExportedUrl:res.data.lastExportedUrl});\n            }\n            this.setState({saving:false});\n        })\n    }\n\n    editTitle = (text) => {\n        //TODO handle empty string\n        this.setState({title:text})\n    };\n\n    editChannelLabel = (text,ci) => {\n        let channelData = this.state.channelData;\n        channelData[ci].edited = true;\n        channelData[ci].title = text;\n        this.setState({channelData})\n    };\n\n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n\n    addDistortionEffect(stream,effectValue) {\n        let audioCtx = this.state.context;\n        let value = effectValue/50;\n        let masterNode = audioCtx.createGain();\n        let distortionGainNode = audioCtx.createGain();\n        let distortionNode = audioCtx.createWaveShaper();\n        distortionNode.curve = makeDistortionCurve(200);\n        stream.connect(distortionNode);\n        distortionNode.connect(distortionGainNode);\n        distortionGainNode.gain.value = value;\n        let bypassNode = audioCtx.createGain();\n        stream.connect(bypassNode);\n        bypassNode.connect(masterNode);\n        bypassNode.gain.value = 1;\n        distortionGainNode.connect(masterNode);\n        return masterNode;\n\n        function makeDistortionCurve(amount) {\n            var k = amount,\n                n_samples = 44100,\n                curve = new Float32Array(n_samples),\n                deg = Math.PI / 180,\n                i = 0,\n                x;\n            for ( ; i < n_samples; ++i ) {\n                x = i * 2 / n_samples - 1;\n                curve[i] = (3 + k)*Math.atan(Math.sinh(x*0.25)*5) / (Math.PI + k * Math.abs(x));\n            }\n            return curve;\n        }\n    }\n\n    getImpulse() {\n        let impulseUrl = 'https://res.cloudinary.com/voiera/video/upload/v1560524168/BIG_HALL_E001_M2S_d0yywu.wav';\n        let ajaxRequest = new XMLHttpRequest();\n        let that = this;\n        ajaxRequest.open('GET', impulseUrl, true);\n        ajaxRequest.responseType = 'arraybuffer';\n\n        ajaxRequest.onload = function() {\n            var impulseData = ajaxRequest.response;\n            that.state.context.decodeAudioData(impulseData).then(function(buffer) {\n                that.setState({convolverBuffer:buffer});\n            });\n        };\n        ajaxRequest.send();\n    }\n\n    addReverbEffect(stream,effectValue) {\n        let value = effectValue/10;\n        let audioCtx = this.state.context;\n        let masterNode = audioCtx.createGain();\n        let bypassNode = audioCtx.createGain();\n        let convolverGainNode = audioCtx.createGain();\n        let convolver = audioCtx.createConvolver();\n        convolver.buffer = this.state.convolverBuffer;\n        stream.connect(convolver);\n        convolver.connect(convolverGainNode);\n        convolverGainNode.gain.value = value;\n        convolverGainNode.connect(masterNode);\n        stream.connect(bypassNode);\n        bypassNode.gain.value = 1;\n        bypassNode.connect(masterNode);\n        return masterNode;\n    }\n\n\n    addDelayEffect(stream,effectValue) {\n        let value = effectValue/100;\n        console.log(value);\n        let audioCtx = this.state.context;\n        //create an audio node from the stream\n        let streamNode = stream;\n        let delayNode = audioCtx.createDelay(100)\n        let feedbackNode = audioCtx.createGain();\n        let bypassNode = audioCtx.createGain();\n        let masterNode = audioCtx.createGain();\n\n        //controls\n        delayNode.delayTime.value = 1.04;\n        feedbackNode.gain.value = 0.5;\n        bypassNode.gain.value = value;\n\n        //wire up nodes\n        streamNode.connect(delayNode);\n        delayNode.connect(feedbackNode);\n        feedbackNode.connect(delayNode);\n\n        delayNode.connect(bypassNode);\n        bypassNode.connect(masterNode);\n        streamNode.connect(masterNode);\n\n        // masterNode.connect(audioCtx.destination);\n        return masterNode;\n    }\n\n    changeTab(channelIndex, value) {\n        let channelData = this.state.channelData;\n        channelData[channelIndex].tab = value;\n        this.setState({channelData})\n    }\n\n    editBPM(bpm) {\n        this.setState({bpm})\n    }\n    editTimeSignature(timeSignature) {\n        this.setState({timeSignature})\n    }\n    editKey(key) {\n        this.setState({key})\n    }\n\n    deleteChannel(ci) {\n        let channelData = this.state.channelData;\n        let deletedChannels = this.state.deletedChannels;\n        let currentDeletedChannel = channelData.splice(ci,1);\n        deletedChannels.push(currentDeletedChannel[0]);\n        this.setState({channelData,deletedChannels});\n    }\n\n    render() {\n        return (\n            <div>\n                { this.state.loading || this.state.saving ? <div className=\"loading\">\n                    <CircularProgress size={80} thickness={5} />\n                    {this.state.loading ? <p>Loading...</p> : <p>Exporting to MP3, This may take a while</p> }\n                </div> : ''}\n                <div className=\"header\">\n                    <div className=\"songDetails\">\n                        {!this.state.loading ?\n                            <EditableLabel text={this.state.title}\n                                           labelClassName='songTitle'\n                                           inputClassName='songTitle'\n                                           inputWidth='300px'\n                                           onFocusOut={this.editTitle.bind(this)}\n                            /> : ''\n                        }\n                    </div>\n                    <div className=\"controls\">\n                        <Button className={\"controlButton\"} onClick={this.stopAll}>\n                            <FontAwesomeIcon icon={faStop}/>\n                        </Button>\n                        <Button className={\"controlButton\"} onClick={this.pauseAll}>\n                            <FontAwesomeIcon icon={faPause}/>\n                        </Button>\n                        <Button className={\"controlButton\"} onClick={()=>{this.playAll()}}>\n                            <FontAwesomeIcon icon={faPlay}/>\n                        </Button>\n                        <Button className={\"controlButton\"}>\n                            {this.msToTime(this.state.runningTime)}\n                        </Button>\n                        <Button className={\"controlButton\"}>\n                            <EditableLabel text={this.state.bpm}\n                                           labelClassName='bpmTitle'\n                                           inputClassName='bpmTitle'\n                                           inputWidth='38px'\n                                           onFocusOut={(data)=>{this.editBPM(data)}}\n                            />BPM\n                        </Button>\n                        <Button className={\"controlButton\"}>\n                            <FontAwesomeIcon style={{'marginRight': '10px'}} icon={faMusic}/>\n                            {!this.state.loading ?\n                                <EditableLabel text={this.state.key}\n                                               labelClassName='bpmTitle'\n                                               inputClassName='bpmTitle'\n                                               inputWidth='38px'\n                                               onFocusOut={(data) => {\n                                                   this.editKey(data)\n                                               }}\n                                /> : ''\n                            }\n                        </Button>\n                        <Button className={\"controlButton\"}>\n                            {!this.state.loading ?\n                                <EditableLabel text={this.state.timeSignature}\n                                               labelClassName='bpmTitle'\n                                               inputClassName='bpmTitle'\n                                               inputWidth='38px'\n                                               onFocusOut={(data) => {\n                                                   this.editTimeSignature(data)\n                                               }}\n                                /> : ''\n                            }\n                        </Button>\n                        <Button className={\"controlButton\"}>\n                            <FontAwesomeIcon style={{\"marginRight\": '10px'}} icon={faSave} onClick={this.saveSong.bind(this)}/> Save\n                        </Button>\n                        <Button className={\"controlButton\"}>\n                            <FontAwesomeIcon style={{\"marginRight\": '10px'}} icon={faFileExport} onClick={() => {this.downloadLink()}}/> Export\n                        </Button>\n                        {this.state.lastExportedUrl ?\n                        <Button className={\"controlButton\"}>\n                            <a style={{color:'inherit', textDecoration:'none'}} href={this.state.lastExportedUrl} download>\n                            <FontAwesomeIcon style={{\"marginRight\": '10px'}} icon={faCloudDownloadAlt}/> Download\n                            </a>\n                        </Button>\n                        : ''}\n                    </div>\n                </div>\n                    <div className=\"channels\">\n                        {this.state.channelData.map((channel,key) =>\n                            <div style={{position:'relative'}}>\n                                <div class=\"deleteChannel\" onClick={() => {this.deleteChannel(key)}}>\n                                    <FontAwesomeIcon icon={faWindowClose}/>\n                                </div>\n                                {(!channel.tab || channel.tab === 0) &&\n                                    <div key={channel._id} className=\"channel\">\n                                        <img src={InstrumentImgs[channel.instrument] || InstrumentImgs.audio}/>\n                                        <div className=\"channel-details\">\n                                            <p>\n                                                <EditableLabel text={channel.title}\n                                                               labelClassName='channelTitle'\n                                                               inputClassName='channelTitle'\n                                                               inputWidth='300px'\n                                                               onFocusOut={(text)=>{this.editChannelLabel(text,key)}}\n                                                />\n                                                {channel.audioFiles.length === 0 ? <input className=\"fileUpload\" type='file' id={'upload-ch-'+key} onChange={this.onUpload} /> : ''}\n                                                </p>\n                                            <FontAwesomeIcon onClick={(e)=>{this.changeVolume(e,0,key)}} icon={faVolumeMute}/>\n                                            <FontAwesomeIcon icon={faHeadphones}/>\n                                            <Slider classes={{root: \"volume-slider\",track: \"volume-track\"}}\n                                                    value={channel.audioEffects.volume * 100}\n                                                    aria-labelledby=\"label\"\n                                                    onChange={(e,volume)=>{this.changeVolume(e,volume,key)}}/>\n                                            <span onClick={(e,value) => {this.changeTab(key,1)}}>\n                                                <FontAwesomeIcon icon={faMagic}/>\n                                            </span>\n                                        </div>\n                                    </div>\n                                }\n                                {(channel.tab === 1) &&\n                                <div key={channel._id} className=\"channel\">\n                                    <img src={InstrumentImgs[channel.instrument] || InstrumentImgs.audio}/>\n                                    <div className=\"channel-details\">\n                                        <div className=\"effect\">\n                                            <p>Delay</p>\n                                            <Slider classes={{root: \"volume-slider\",track: \"volume-track\"}}\n                                                    value={channel.audioEffects.delay}\n                                                    onChange={(e,value)=>{this.editEffect('delay',value,key)}}/>\n                                            <p>Reverb</p>\n                                            <Slider classes={{root: \"volume-slider\",track: \"volume-track\"}}\n                                                    value={channel.audioEffects.reverb}\n                                                    onChange={(e,value)=>{this.editEffect('reverb',value,key)}}/>\n                                            <p>Distortion</p>\n                                            <Slider classes={{root: \"volume-slider\",track: \"volume-track\"}}\n                                                    value={channel.audioEffects.distortion}\n                                                    onChange={(e,value)=>{this.editEffect('distortion',value,key)}}/>\n                                            <p onClick={(e,value) => {this.changeTab(key,0)}}>\n                                                <FontAwesomeIcon icon={faStepBackward}/>\n                                            </p>\n                                        </div>\n                                    </div>\n                                </div>\n                                }\n                            </div>\n                        )}\n                        <div>\n                            <Button className={\"controlButton\"} onClick={this.addChannel.bind(this)}>\n                                <FontAwesomeIcon icon={faPlus}/>\n                            </Button>\n                        </div>\n                    </div>\n                    <div className=\"timeline-container\">\n                        <div className=\"playLine\" style={{'left': (this.state.runningTime/1000) * (this.state.spacing)}}/>\n                        <div className=\"timeline\">\n                            <div className=\"timebar\"></div>\n                            {this.state.channelData.map((channel,ci) =>\n                                <div key={channel._id} className=\"timebar-channel\" id={\"channel-\"+ci}>\n                                    {channel.audioFiles.map((audioclip,ai) =>\n                                        <Draggable key={audioclip._id} bounds={\"#channel-\"+ci} axis=\"x\" defaultPosition={{'x':audioclip.location,y:0}} onDrag={this.handleDrag}>\n                                            <div id={'audio-'+ci+'-'+ai} className=\"audioSnippet\">\n                                                <div className=\"title\">\n                                                Audio File {audioclip.id} : {this.msToTime((audioclip.location / this.state.spacing) * 1000)}\n                                                </div>\n                                                <Waveform\n                                                    buffer={audioclip.buffer}\n                                                    width={(audioclip.buffer && (audioclip.buffer.duration || 0)) * this.state.spacing}\n                                                    height={60}\n                                                    waveStyle={{\n                                                        // animate waveform on draw (default: true)\n                                                        animate: true,\n                                                        // waveform color\n                                                        color: '#95adc9',\n                                                        // width of each rendered point (min: 1, max: 10)\n                                                        pointWidth: 1\n                                                    }}\n                                                />\n                                                <Button className=\"deleteAudio\" onClick={this.deleteAudio.bind(this,ci,ai)}>\n                                                    <FontAwesomeIcon icon={faWindowClose}/>\n                                                </Button>\n                                            </div>\n                                        </Draggable>\n                                    )}\n                                </div>\n                            )}\n\n                        </div>\n\n                    </div>\n            </div>\n        );\n    }\n}\n\nexport default Studio;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Studio from './components/studio';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Studio />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports.InstrumentImgs = {\n    'guitar' : '../images/guitar.png',\n    'vocal' : '../images/vocal.png',\n    'bass' : '../images/guitar.png',\n    'drums' : '../images/drums.png',\n    'audio' : '../images/audio.png'\n}"],"sourceRoot":""}